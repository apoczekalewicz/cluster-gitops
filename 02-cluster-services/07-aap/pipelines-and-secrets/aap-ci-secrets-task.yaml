apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-api-token-secret
  namespace: ansible-automation-platform
spec:
  params:
    - description: The namespace to create the aap secret in.
      name: NAMESPACE
      type: string
    - default: latest
      description: The OpenShift Version to use
      name: VERSION
      type: string
  steps:
    - env:
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: controller-admin-password
      image: 'quay.io/apoczeka/container-toolbox:$(params.VERSION)'
      name: create-api-token-and-secret
      resources: {}
      script: >
        # If secret already exists, don't regenerate.

        if [[ -n `oc get secret controlleraccess -n $(params.NAMESPACE) 2>/dev/null` ]] ;
        then
            
            echo "AAP controller token secret already exists in $(params.NAMESPACE)."
            
            exit 0
            
        fi

        # Wait for central to be ready

        attempt_counter=0

        max_attempts=20

        echo "Waiting for controller to be available..." 

        until $(curl -k --output /dev/null --silent --head --fail
        http://controller-service); do
            
            if [ ${attempt_counter} -eq ${max_attempts} ];then
              echo "Max attempts reached"

              exit 1
            fi

            printf '.'

            attempt_counter=$(($attempt_counter+1))

            echo "Made attempt $attempt_counter, waiting..."

            sleep 10

        done

        CONTROLLER_URL="$(oc get route controller -n ansible-automation-platform -o go-template='{{.spec.host}}')"

        echo Controller URL - ${CONTROLLER_URL}


        # Create personal admin token

        API_ENDPOINT="/api/v2/users/admin/personal_tokens/"

        CONTROLLER_URL_API="https://$CONTROLLER_URL$API_ENDPOINT"

        echo "CONTROLLER_URL_API - $CONTROLLER_URL_API"

        PAYLOAD="{\"description\": \"Project $(params.NAMESPACE)\", \"application\":null, \"scope\":\"write\"}"

        echo "PAYLOAD - $PAYLOAD"

        echo "Create personal admin token - $(params.NAMESPACE)"

        RESPONSE=$(curl -k \
          -X POST -u "admin:$PASSWORD" \
          -H "Content-Type: application/json" \
          --data "$PAYLOAD" \
          $CONTROLLER_URL_API)

        TOKEN=$(jq -r '.token' <<< "$RESPONSE")

        echo $TOKEN 

        exit
        # Create secret in target namespace.

        oc create secret generic roxsecrets \
          --from-literal=rox_central_endpoint=$CENTRAL_URL:443 \
          --from-literal=rox_api_token=$TOKEN \
          -n $(params.NAMESPACE)
